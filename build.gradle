apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply from: "$rootDir/gradle/versioning.gradle"
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'be.pixxis'
mainClassName = 'be.pixxis.zoufzouf.LogSlurper'
sourceCompatibility = 1.8

task wrapper(type: Wrapper) {
    description = 'bootstrap the gradle wrapper'
    gradleVersion = '2.12'
}

// Declare external dependencies for the build script itself.
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
    }
}

idea {
    project {
        languageLevel = '1.8'
    }
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

checkstyle {
    toolVersion = '6.17'
    showViolations = false
    ignoreFailures = false
}

pmd {
    toolVersion = '5.4.1'
    ignoreFailures = false
}
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = false
    effort = 'max'
}
tasks.withType(FindBugs){
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

sourceSets {
    integration {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/groovy')
        }
        resources.srcDir file('src/integration/resources')
    }
}

test {
    minHeapSize = '128m'
    maxHeapSize = '256m'
    forkEvery = 5
    def forks = Runtime.runtime.availableProcessors() / 2
    maxParallelForks = forks < 1 ? 1 : forks
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }

    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

task integrationTest(type: Test) {
    description = "Run integration tests (located in src/intTest/...)."
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
    outputs.upToDateWhen { false }
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
}
check.dependsOn integrationTest

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

jar {
    dependsOn createBuildInfoFile
    from(buildDir) {
        include 'build-info.properties'
    }

    manifest {
        attributes 'Implementation-Title': 'ZoufZouf, a multithreaded CloudFront log analyzer',
                'Implementation-Version': version,
                'Main-Class': 'be.pixxis.zoufzouf.LogSlurper'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // JSON
//    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    compile group: 'org.yaml', name: 'snakeyaml', version: '1.17'

    // Logging
    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "org.slf4j:slf4j-api:1.7.13"

    // jclouds
    compile group: 'org.apache.jclouds.provider', name: 'aws-s3', version: '1.9.1'
    compile group: 'org.apache.jclouds.api', name: 'filesystem', version: '1.9.1'

    // Java Concurrency in Practice
    compile group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    // Joda Time
    compile group: 'joda-time', name: 'joda-time', version: '2.8.2'

    // Java Mail
    compile group: 'javax.mail', name: 'mail', version: '1.4.7'

    // MongoDB
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.2.2'
    compile group: 'org.mongojack', name: 'mongojack', version: '2.6.0'

    compile "com.google.code.findbugs:findbugs:3.0.1"

    // Spock testing depencies
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"
    // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"
    // allows mocking of classes without default constructor (together with CGLIB)
}
