// Declare external dependencies for the build script itself.
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
    }
}

plugins {
    id 'groovy'
    id 'idea'
    id 'application'
    id 'checkstyle'
    id 'findbugs'
    id 'pmd'
    id 'jacoco'
    id 'net.researchgate.release' version '2.3.4'
    id 'com.jfrog.bintray' version '1.6'
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply from: "$rootDir/gradle/versioning.gradle"

group = 'be.pixxis'
mainClassName = 'be.pixxis.zoufzouf.LogSlurper'
sourceCompatibility = 1.8

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

task wrapper(type: Wrapper) {
    description = 'bootstrap the gradle wrapper'
    gradleVersion = '2.12'
}

idea {
    project {
        languageLevel = '1.8'
    }
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

checkstyle {
    toolVersion = '6.17'
    showViolations = false
    ignoreFailures = false
}

pmd {
    toolVersion = '5.4.1'
    ignoreFailures = false
}
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = false
    effort = 'max'
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

sourceSets {
    integration {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/groovy')
        }
        resources.srcDir file('src/integration/resources')
    }
}

test {
    minHeapSize = '128m'
    maxHeapSize = '256m'
    forkEvery = 5
    def forks = Runtime.runtime.availableProcessors() / 2
    maxParallelForks = forks < 1 ? 1 : forks
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }

    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

task integrationTest(type: Test) {
    description = "Run integration tests (located in src/intTest/...)."
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
    outputs.upToDateWhen { false }
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
}
check.dependsOn integrationTest

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

jar {
    dependsOn createBuildInfoFile
    from(buildDir) {
        include 'build-info.properties'
    }

    manifest {
        attributes 'Implementation-Title': 'ZoufZouf, a multithreaded CloudFront log analyzer',
                'Implementation-Version': version,
                'Main-Class': 'be.pixxis.zoufzouf.LogSlurper'
    }
}

processResources {
    exclude '**/properties.yml'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    compile 'org.yaml:snakeyaml:1.17'

    // Logging
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile 'org.slf4j:slf4j-api:1.7.21'

    // jclouds
    compile 'org.apache.jclouds.provider:aws-s3:1.9.2'
    compile 'org.apache.jclouds.api:filesystem:1.9.2'

    // Java Concurrency in Practice
    compile 'net.jcip:jcip-annotations:1.0'

    // Joda Time
    compile 'joda-time:joda-time:2.9.4'

    // Java Mail
    compile 'javax.mail:mail:1.4.7'

    // MongoDB
    compile 'org.mongodb:mongo-java-driver:3.3.0'
    compile 'org.mongojack:mongojack:2.6.1'

    compile "com.google.code.findbugs:findbugs:3.0.1"

    // Spock testing depencies
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.2.4"
    // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.4"
    // allows mocking of classes without default constructor (together with CGLIB)
}

distributions {
    version = null
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'generic'
        name = 'zoufzouf'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/glnds/zoufzouf.git'
        desc = 'Multithreaded AWS CloudFront log Analyser '
        githubRepo = 'glnds/zoufzouf' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        version {
            name = project.version //Bintray logical version name
        }
    }
}
